{"version":3,"sources":["utils/utils.types.ts","components/number-display/number-display.component.tsx","utils/utils.ts","components/button/button.component.tsx","components/app/app.component.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowIndex","columnIndex","rowNumber","columnNumber","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomRightCell","generateCells","numberOfBombs","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomColumn","bomb","currentCell","map","field","Button","onClick","onContext","red","visible","onContextMenu","role","aria-label","flagged","App","useState","setRow","column","setColumn","bombs","setBombs","setRowNumber","setColumnNumber","setNumberOfBombs","setCells","smile","face","setFace","time","setTime","start","setStart","flags","setFlags","lose","setLose","win","setWin","useEffect","bodyGrid","display","gridTemplateRows","gridTemplateColumns","handleMousedown","surprise","handleMouseup","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","handleGameStart","rowParam","columnParam","newCells","slice","showAllBombs","openAdjacentCells","safeOpenCellsExists","cell","handleCellContext","e","preventDefault","currentCells","handleFaceClick","onSubmit","type","max","min","required","onChange","parseInt","target","placeholder","style","colIndex","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a558d820.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb,\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    visible,\r\n    flagged,\r\n}\r\n\r\nexport type Cell = { value: CellValue; state: CellState; red?: boolean };\r\n\r\nexport enum Face {\r\n    smile = '😁',\r\n    surprise = '😲',\r\n    win = '😎',\r\n    lose = '😭',\r\n}\r\n","import React from 'react';\r\nimport './number-display.styles.scss';\r\n\r\ninterface NumberDisplayProps {\r\n    value: number;\r\n}\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n    return (\r\n        <div className='number-display'>\r\n            {value < 0\r\n                ? `-${Math.abs(value).toString().padStart(2, '0')}`\r\n                : value.toString().padStart(3, '0')}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import { CellValue, CellState, Cell } from './utils.types';\r\n\r\n// We use this function multiple times!\r\n// Here we check if current field has a adjacent field.\r\nconst grabAllAdjacentCells = (\r\n    cells: Cell[][],\r\n    rowIndex: number,\r\n    columnIndex: number,\r\n    rowNumber: number,\r\n    columnNumber: number\r\n): {\r\n    topLeftCell: Cell | null;\r\n    topCell: Cell | null;\r\n    topRightCell: Cell | null;\r\n    leftCell: Cell | null;\r\n    rightCell: Cell | null;\r\n    bottomLeftCell: Cell | null;\r\n    bottomCell: Cell | null;\r\n    bottomRightCell: Cell | null;\r\n} => {\r\n    const topLeftCell =\r\n        rowIndex > 0 && columnIndex > 0\r\n            ? cells[rowIndex - 1][columnIndex - 1]\r\n            : null;\r\n    const topCell = rowIndex > 0 ? cells[rowIndex - 1][columnIndex] : null;\r\n    const topRightCell =\r\n        rowIndex > 0 && columnIndex < columnNumber - 1\r\n            ? cells[rowIndex - 1][columnIndex + 1]\r\n            : null;\r\n    const leftCell = columnIndex > 0 ? cells[rowIndex][columnIndex - 1] : null;\r\n    const rightCell =\r\n        columnIndex < columnNumber - 1\r\n            ? cells[rowIndex][columnIndex + 1]\r\n            : null;\r\n    const bottomLeftCell =\r\n        rowIndex < rowNumber - 1 && columnIndex > 0\r\n            ? cells[rowIndex + 1][columnIndex - 1]\r\n            : null;\r\n    const bottomCell =\r\n        rowIndex < rowNumber - 1 ? cells[rowIndex + 1][columnIndex] : null;\r\n    const bottomRightCell =\r\n        rowIndex < rowNumber - 1 && columnIndex < columnNumber - 1\r\n            ? cells[rowIndex + 1][columnIndex + 1]\r\n            : null;\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n    };\r\n};\r\n\r\nexport const generateCells = (\r\n    rowNumber: number,\r\n    columnNumber: number,\r\n    numberOfBombs: number\r\n): Cell[][] => {\r\n    let cells: Cell[][] = [];\r\n\r\n    // Generating all cells\r\n    for (let row = 0; row < rowNumber; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < columnNumber; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Randomly put X bombs from user input\r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < numberOfBombs) {\r\n        const randomRow = Math.floor(Math.random() * rowNumber);\r\n        const randomColumn = Math.floor(Math.random() * columnNumber);\r\n\r\n        // We don't want to put two or more bombs on the sam spot\r\n        const currentCell = cells[randomRow][randomColumn];\r\n        if (currentCell.value !== CellValue.bomb) {\r\n            cells[randomRow][randomColumn] = {\r\n                ...cells[randomRow][randomColumn],\r\n                value: CellValue.bomb,\r\n            };\r\n            bombsPlaced++;\r\n        }\r\n    }\r\n    // Numbers for each cell depending on how many bombs in adjacent cells\r\n    for (let rowIndex = 0; rowIndex < rowNumber; rowIndex++) {\r\n        for (let columnIndex = 0; columnIndex < columnNumber; columnIndex++) {\r\n            const currentCell = cells[rowIndex][columnIndex];\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue;\r\n            }\r\n\r\n            let numberOfBombs = 0;\r\n            // Here we check if current field has a adjacent field.\r\n            // Cell at 0,0 doesn't have top fields and left and bottomLeft\r\n            const {\r\n                topLeftCell,\r\n                topCell,\r\n                topRightCell,\r\n                leftCell,\r\n                rightCell,\r\n                bottomLeftCell,\r\n                bottomCell,\r\n                bottomRightCell,\r\n            } = grabAllAdjacentCells(\r\n                cells,\r\n                rowIndex,\r\n                columnIndex,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n\r\n            // Instead of writing eight same if checks,\r\n            // I have placed them in array and loop through with map function\r\n            const adjacentFields = [\r\n                topLeftCell,\r\n                topCell,\r\n                topRightCell,\r\n                leftCell,\r\n                rightCell,\r\n                bottomLeftCell,\r\n                bottomCell,\r\n                bottomRightCell,\r\n            ];\r\n\r\n            // We add bombTotal for each adjacent bomb field\r\n            adjacentFields.map((field) => {\r\n                if (field?.value === CellValue.bomb) {\r\n                    return numberOfBombs++;\r\n                }\r\n            });\r\n\r\n            // Set the state.value to the number of adjacent bomb fields\r\n            if (numberOfBombs > 0) {\r\n                cells[rowIndex][columnIndex] = {\r\n                    ...currentCell,\r\n                    value: numberOfBombs,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return cells;\r\n};\r\n\r\nexport const openAdjacentCells = (\r\n    cells: Cell[][],\r\n    rowParam: number,\r\n    columnParam: number,\r\n    rowNumber: number,\r\n    columnNumber: number\r\n): Cell[][] => {\r\n    const currentCell = cells[rowParam][columnParam];\r\n\r\n    if (\r\n        currentCell.state === CellState.visible ||\r\n        currentCell.state === CellState.flagged\r\n    ) {\r\n        return cells;\r\n    }\r\n\r\n    let newCells = cells.slice();\r\n    newCells[rowParam][columnParam].state = CellState.visible;\r\n\r\n    const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n    } = grabAllAdjacentCells(\r\n        cells,\r\n        rowParam,\r\n        columnParam,\r\n        rowNumber,\r\n        columnNumber\r\n    );\r\n\r\n    //\r\n    if (\r\n        topLeftCell?.state === CellState.open &&\r\n        topLeftCell.value !== CellValue.bomb\r\n    ) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam - 1,\r\n                columnParam - 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam - 1][columnParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam - 1,\r\n                columnParam,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam - 1][columnParam].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        topRightCell?.state === CellState.open &&\r\n        topRightCell.value !== CellValue.bomb\r\n    ) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam - 1,\r\n                columnParam + 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam - 1][columnParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        leftCell?.state === CellState.open &&\r\n        leftCell.value !== CellValue.bomb\r\n    ) {\r\n        if (leftCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam,\r\n                columnParam - 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam][columnParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        rightCell?.state === CellState.open &&\r\n        rightCell.value !== CellValue.bomb\r\n    ) {\r\n        if (rightCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam,\r\n                columnParam + 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam][columnParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        bottomLeftCell?.state === CellState.open &&\r\n        bottomLeftCell.value !== CellValue.bomb\r\n    ) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam + 1,\r\n                columnParam - 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam + 1][columnParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        bottomCell?.state === CellState.open &&\r\n        bottomCell.value !== CellValue.bomb\r\n    ) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam + 1,\r\n                columnParam,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam + 1][columnParam].state = CellState.visible;\r\n        }\r\n    }\r\n    //\r\n    if (\r\n        bottomRightCell?.state === CellState.open &&\r\n        bottomRightCell.value !== CellValue.bomb\r\n    ) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam + 1,\r\n                columnParam + 1,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n        } else {\r\n            newCells[rowParam + 1][columnParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    return newCells;\r\n};\r\n","import React from 'react';\r\nimport './button.styles.scss';\r\nimport { CellState, CellValue } from '../../utils/utils.types';\r\n\r\ninterface ButtonProps {\r\n    row: number;\r\n    col: number;\r\n    state: CellState;\r\n    value: CellValue;\r\n    onClick(rowParam: number, columnParam: number): (...args: any[]) => void;\r\n    onContext(rowParam: number, columnParam: number): (...args: any[]) => void;\r\n    red?: boolean;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n    row,\r\n    col,\r\n    state,\r\n    value,\r\n    onClick,\r\n    onContext,\r\n    red,\r\n}) => {\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return (\r\n                    <span role='img' aria-label='bomb'>\r\n                        💣\r\n                    </span>\r\n                );\r\n            } else if (value === CellValue.none) {\r\n                return null;\r\n            }\r\n            return value;\r\n        } else if (state === CellState.flagged) {\r\n            return (\r\n                <span role='img' aria-label='flag'>\r\n                    🚩\r\n                </span>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n    return (\r\n        <div\r\n            className={`button ${\r\n                state === CellState.visible ? 'visible' : ''\r\n            } value-${value} ${red ? 'red' : ''}`}\r\n            onClick={onClick(row, col)}\r\n            onContextMenu={onContext(row, col)}\r\n        >\r\n            {renderContent()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './app.styles.scss';\r\nimport NumberDisplay from '../number-display/number-display.component';\r\nimport { generateCells, openAdjacentCells } from '../../utils/utils';\r\nimport { Face, Cell, CellState, CellValue } from '../../utils/utils.types';\r\nimport Button from '../button/button.component';\r\n\r\nconst App: React.FC = () => {\r\n    // Rows and columns for game\r\n    const [row, setRow] = useState<number>(10);\r\n    const [column, setColumn] = useState<number>(10);\r\n    const [bombs, setBombs] = useState<number>(10);\r\n    const [rowNumber, setRowNumber] = useState<number>(row);\r\n    const [columnNumber, setColumnNumber] = useState<number>(column);\r\n    const [numberOfBombs, setNumberOfBombs] = useState<number>(bombs);\r\n    const [cells, setCells] = useState<Cell[][]>(\r\n        generateCells(rowNumber, columnNumber, numberOfBombs)\r\n    );\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(0);\r\n    const [start, setStart] = useState<boolean>(false);\r\n    const [flags, setFlags] = useState<number>(numberOfBombs);\r\n    const [lose, setLose] = useState<boolean>(false);\r\n    const [win, setWin] = useState<boolean>(false);\r\n\r\n    // User input form for rows and columns\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n        e.preventDefault();\r\n        setRowNumber(row);\r\n        setColumnNumber(column);\r\n        setNumberOfBombs(bombs);\r\n        handleFaceClick();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCells(generateCells(rowNumber, columnNumber, numberOfBombs));\r\n        setFlags(numberOfBombs);\r\n    }, [rowNumber, columnNumber, numberOfBombs]);\r\n\r\n    // Inline style to control grid size\r\n    const bodyGrid = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${rowNumber}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${columnNumber}, 1fr)`,\r\n    };\r\n\r\n    // When we click on the button face changes\r\n    useEffect(() => {\r\n        const handleMousedown = (): void => {\r\n            setFace(Face.surprise);\r\n        };\r\n        const handleMouseup = (): void => {\r\n            setFace(Face.smile);\r\n        };\r\n        window.addEventListener('mousedown', handleMousedown);\r\n        window.addEventListener('mouseup', handleMouseup);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMousedown);\r\n            window.removeEventListener('mouseup', handleMouseup);\r\n        };\r\n    }, []);\r\n\r\n    // Start timer\r\n    useEffect(() => {\r\n        if (start && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1);\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [start, time]);\r\n\r\n    // Lost condition\r\n    useEffect(() => {\r\n        if (lose) {\r\n            setFace(Face.lose);\r\n            setStart(false);\r\n        }\r\n    }, [lose]);\r\n\r\n    // Win\r\n    useEffect(() => {\r\n        if (win) {\r\n            setStart(false);\r\n            setFace(Face.win);\r\n        }\r\n    }, [win]);\r\n    // Start game\r\n    const handleGameStart = (\r\n        rowParam: number,\r\n        columnParam: number\r\n    ) => (): void => {\r\n        if (win || lose) {\r\n            return;\r\n        }\r\n        if (!start) {\r\n            setStart(true);\r\n        }\r\n\r\n        const currentCell = cells[rowParam][columnParam];\r\n        let newCells = cells.slice();\r\n\r\n        if (\r\n            currentCell.state === CellState.flagged ||\r\n            currentCell.state === CellState.visible\r\n        ) {\r\n            return;\r\n        }\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setLose(true);\r\n            newCells[rowParam][columnParam].red = true;\r\n            newCells = showAllBombs();\r\n            setCells(newCells);\r\n            return;\r\n        } else if (currentCell.value === CellValue.none) {\r\n            newCells = openAdjacentCells(\r\n                newCells,\r\n                rowParam,\r\n                columnParam,\r\n                rowNumber,\r\n                columnNumber\r\n            );\r\n            setCells(newCells);\r\n        } else {\r\n            newCells[rowParam][columnParam].state = CellState.visible;\r\n        }\r\n        // Check to see if user won\r\n        let safeOpenCellsExists = false;\r\n        for (let row = 0; row < rowNumber; row++) {\r\n            for (let col = 0; col < columnNumber; col++) {\r\n                const currentCell = newCells[row][col];\r\n\r\n                if (\r\n                    currentCell.value !== CellValue.bomb &&\r\n                    currentCell.state === CellState.open\r\n                ) {\r\n                    safeOpenCellsExists = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!safeOpenCellsExists) {\r\n            newCells = newCells.map((row) =>\r\n                row.map((cell) => {\r\n                    if (cell.value === CellValue.bomb) {\r\n                        return {\r\n                            ...cell,\r\n                            state: CellState.flagged,\r\n                        };\r\n                    }\r\n                    return cell;\r\n                })\r\n            );\r\n            setWin(true);\r\n        }\r\n        setCells(newCells);\r\n    };\r\n\r\n    // Right click to set flags\r\n    const handleCellContext = (rowParam: number, columnParam: number) => (\r\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n    ): void => {\r\n        e.preventDefault();\r\n\r\n        if (!start) {\r\n            return;\r\n        }\r\n        const currentCells = cells.slice();\r\n        const currentCell = cells[rowParam][columnParam];\r\n\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        } else if (currentCell.state === CellState.open) {\r\n            currentCells[rowParam][columnParam].state = CellState.flagged;\r\n            setCells(currentCells);\r\n            setFlags(flags - 1);\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][columnParam].state = CellState.open;\r\n            setCells(currentCells);\r\n            setFlags(flags + 1);\r\n        }\r\n    };\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map((rowNumber, rowIndex) =>\r\n            rowNumber.map((cell, colIndex) => (\r\n                <Button\r\n                    key={rowIndex + '-' + colIndex}\r\n                    state={cell.state}\r\n                    value={cell.value}\r\n                    row={rowIndex}\r\n                    col={colIndex}\r\n                    red={cell.red}\r\n                    onClick={handleGameStart}\r\n                    onContext={handleCellContext}\r\n                />\r\n            ))\r\n        );\r\n    };\r\n\r\n    // BoardReset\r\n    const handleFaceClick = (): void => {\r\n        setStart(false);\r\n        setTime(0);\r\n        setCells(generateCells(rowNumber, columnNumber, numberOfBombs));\r\n        setLose(false);\r\n        setWin(false);\r\n        setFlags(numberOfBombs);\r\n    };\r\n\r\n    // Show all bombs\r\n    const showAllBombs = (): Cell[][] => {\r\n        const currentCells = cells.slice();\r\n        return currentCells.map((row) =>\r\n            row.map((cell) => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.visible,\r\n                    };\r\n                }\r\n                return cell;\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit} className='form'>\r\n                <h2>Set difficulty</h2>\r\n                <div>\r\n                    <label>Rows (max 15) </label>\r\n                    <input\r\n                        type='number'\r\n                        value={row}\r\n                        max={15}\r\n                        min={5}\r\n                        required\r\n                        onChange={(e) => setRow(parseInt(e.target.value))}\r\n                        placeholder='Number of rows'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Columns (max 35) </label>\r\n                    <input\r\n                        type='number'\r\n                        value={column}\r\n                        max={35}\r\n                        min={10}\r\n                        required\r\n                        onChange={(e) => setColumn(parseInt(e.target.value))}\r\n                        placeholder='Number of columns'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Bombs (max of (rows * columns) - 1) </label>\r\n                    <input\r\n                        type='number'\r\n                        value={bombs}\r\n                        min={1}\r\n                        max={row * column - 1}\r\n                        required\r\n                        onChange={(e) => setBombs(parseInt(e.target.value))}\r\n                        placeholder='Number of bombs'\r\n                    />\r\n                </div>\r\n                <button type='submit'>Confirm</button>\r\n            </form>\r\n            <div className='App'>\r\n                <div className='Header'>\r\n                    <NumberDisplay value={flags} />\r\n                    <div className='face' onClick={handleFaceClick}>\r\n                        <span role='img' aria-label='face'>\r\n                            {face}\r\n                        </span>\r\n                    </div>\r\n                    <NumberDisplay value={time} />\r\n                </div>\r\n                <div className='Body' style={bodyGrid}>\r\n                    {renderCells()}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/app.component';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}